<?php
/**
* ProcessLogs
* @author Nico Knoll "nico"
* @link http://nico.is
* 
* ProcessWire 2.x 
* Copyright (C) 2010 by Ryan Cramer 
* Licensed under GNU/GPL v2, see LICENSE.TXT
* 
* http://www.processwire.com
* http://www.ryancramer.com
*
*/

class ProcessLogs extends Process implements Module {

	public static function getModuleInfo() {
		return array(
			'title' => 'Logs', 
			'version' => '1.3.0', 
			'summary' => __('Let you see your logs.'),
			'singular' => true, 
			'autoload' => false,
			'page' => array(
				'name' => 'process-logs',
				'parent' => 'setup',
				'title' => __('Logs')
			)
		);
	}

	public function init() {
		parent::init();
		ini_set('auto_detect_line_endings', true);
		
	}
	
	// the page where you can choose which log to display
	public function ___execute() {
        $form = $this->modules->get("InputfieldForm");
        $form->method = 'post';
        $form->action = './log/';
		
		// get all of the logs
		$logs = glob($this->config->paths->logs.'*');
		
		// create a select field where you can choose which log to display
        $field = $this->modules->get("InputfieldSelect");
        $field->label = $this->_('Select log');
        $field->description = $this->_('Select the log you want to use.');
        $field->name = 'file';
        $field->required = true;
        $i = 0;
        foreach($logs as $log) {
        		$field->addOption(basename($log), ucfirst(basename($log, '.txt')));
        		$i++;
		}
        $form->add($field);

		// add submit button
        $field = $this->modules->get("InputfieldButton");
        $field->type = 'submit';
        $field->value = $this->_('Display the selected log file');
        $field->name = '';
        $form->add($field);

        return $form->render();
	}
	
	// the page where you see the selected log
	public function ___executeLog() {
		if($this->input->post->file && $this->input->get->log == '') {
			$this->session->redirect('?log='.basename($this->input->post->file, '.txt'));
		}
		

		$selectedLog = $this->input->get->log;
		
		// generate the form wrapper
		$form = $this->modules->get("InputfieldForm");
		$form->method = 'post';
		$form->action = '../clear/';
		
		// add breadcrumb
		$this->setFuel('processHeadline', ucfirst($selectedLog) . ' Log');
		$this->fuel->breadcrumbs->add(new Breadcrumb('../', 'Logs'));
		
		// generates the table + headers
		$table = $this->modules->get('MarkupAdminDataTable');
		$table->setSortable(true); 
		$table->setEncodeEntities(false);
		$header = array(
			$this->_('Date'),
			$this->_('User'),
			$this->_('Page'),
			$this->_('Description')
		);
		$table->headerRow($header);
		
		// load the log entries into an array
		$lines = array_reverse(file($this->config->paths->logs . $selectedLog . '.txt', FILE_IGNORE_NEW_LINES));

		// process the entries
		$entries = array();
		foreach($lines as $line) {
			// find the right log format
			if(preg_match('%^(.*) (.*)	(.*)	(.*)	(.*)$%AUis', $line, $matches)) { // errors log
				$matches = array_combine(array('full', 'date', 'time', 'user', 'page', 'description'), $matches);
			} elseif(preg_match('%^(.*) (.*): (.*):(.*):(.*)$%AUis', $line, $matches)) { // message log
				$matches = array_combine(array('full', 'date', 'time', 'user', 'page', 'description'), $matches);
			} elseif(preg_match('%^(.*) (.*)	(.*)$%AUis', $line, $matches)) { // system-upgrade log
				$matches = array_combine(array('full', 'date', 'time', 'description'), $matches);
				$matches['user'] = 'N/A';
				$matches['page'] = 'N/A';
			} else {
				// preserve from a lot of matching errors if invalid format 
				throw new WireException($this->_("Invalid log format.")); 
			}
			
			// adjust time and date
			$matches['timestamp'] = strtotime($matches['date'].' '.$matches['time']);
			unset($matches['date'], $matches['time']);
			
			// combine matches to an entry
			$entries[] = $matches;
		}
		

		// if entries, add them to the table row for row and add a "clear log" button
		if(count($entries)) {
			foreach($entries as $entry) {
				// clean the url by removing the host
				$replaceable = array(
					$this->pages->get(1)->httpUrl,
					'http://'.$this->config->httpHost.'/',
					'https://'.$this->config->httpHost.'/',
				);
				$linkRelative = str_replace($replaceable, '/', $entry['page']);
				
				switch($linkRelative) {
					default:
						$link = '<a href="'.$entry['page'].'">'.$linkRelative.'</a>&emsp;';
						break;
					case '?':
						$link = 'N/A';
						break;
					case '/?/':
						$link = 'N/A';
						break;
					case 'N/A':
						$link = 'N/A';
						break;
				}
				
				// get the right user
				$user = (($entry['user'] == '?') ? 'N/A' : $entry['user']);

				// add the the row to the table
				$table->row(array(
					date($this->config->dateFormat, $entry['timestamp']),
					$user.'&emsp;',
					'<span>'.$link.'</span>',
					'<span>'.$entry['description'].'</span>'
				));	
			}
			
			// generate a wrapper for the table
			$field = $this->modules->get('InputfieldMarkup');
			$field->value = $table->render();
			$form->add($field);
			
			// add "clear log" button
			$button = $this->modules->get("InputfieldButton");
			$button->type = 'submit';
			$button->id = 'clear_log';
			$button->value = $this->_('Clear Log');
			$form->add($button);
			
		} else {
			
			// add notice if log's empty
			$field = $this->modules->get('InputfieldMarkup');
			$field->value = 'This log is empty.';
			$field->class = 'noborder';
			$form->add($field);
		}
		
		
		// add a hidden field to transport the log name
		$field = $this->modules->get('InputfieldHidden');
		$field->name = 'log';
		$field->value = $selectedLog;
		$form->add($field);
		
		// return the rendered form
		return $form->render();
	}
	
	// clears the log and redirects to log page
	public function ___executeClear() {
		$filepath = $this->config->paths->logs . $this->input->post->log . '.txt';
		$handle = fopen($filepath, 'w'); // Open to write and set filesize to 0
		fclose($handle);
		$this->session->redirect('../log/?log=' . $this->input->post->log);
	}	
}
